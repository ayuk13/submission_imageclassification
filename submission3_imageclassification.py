# -*- coding: utf-8 -*-
"""submission3_imageclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16EwS1On9YcdbJQW9SWOChBTqlKO1qJ4y

# **Proyek Akhir Dicoding: Image Classification Model Deployment**

*   Nama : Ayu Kirana Vijayanti Indarto
*   Email: ayukiranav136@gmail.com
*   Dicoding ID: ayukv136
* Linkedin: https://www.linkedin.com/in/ayukiranav136

Pada proyek ini akan mengembangkan model ML untuk klasifikasi gambar kemudian mengkonversi model tersebut ke dalam format berkas TF-Lite yang dapat di embed di Android dan iOS.

## Install kaggle
"""

# install package dengan pip dan upload file json
!pip install -q kaggle
from google.colab import files
uploaded = files.upload()

# membuat directory
!chmod 600 /content/kaggle.json

# unduh dataset
!KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d mahmoudreda55/satellite-image-classification

"""## Mengekstrak dataset"""

# unzip dataset
import os, zipfile, shutil, PIL
local_zip = '/content/satellite-image-classification.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""Melihat isi dari direktori"""

base_dir = '/content/data'
label = os.listdir(base_dir)

item_and_label = {}

for a in label:
  item = os.listdir(os.path.join(base_dir, a))
  item_and_label[a] = len(item)

item_and_label

"""Terdapat 4 class pada dataset yaitu
* Cloudy dengan 1500 gambar
* Desert dengan 1131 gambar
* Water dengan 1500 gambar
* Green Area dengan 1500 gambar

## Import library
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator

import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

import numpy as np
import pathlib

"""## Preprocessing data dengan image augmentation

Mempersiapkan data dan augmentasi gambar menggunakan Image Data Generator serta memisahkan data menjadi data latih dan data validasi.
"""

train_datagen = ImageDataGenerator(rescale=1./255.0,
                                   rotation_range=20,
                                   shear_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest',
                                   validation_split=0.2)

# menentukan nilai target_size dan batch_size
target_size = (150, 150)
batch_size = 32

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=target_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=target_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

"""Pembagian data latih sebesar 80% dan data validasi sebesar 20%, diperoleh:
* Data Latih memiliki 4505 sampel gambar dengan 4 kelas, dan
* Data validasi memiliki 1126 sampel gambar dengan 4 kelas.

## Membangun model Sequential
"""

model = keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(len(label), activation='softmax')
])

model.summary()

"""Melakukan compile model"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""## Menginisialisasi fungsi `Callback`"""

# Penggunaan Callback mencegah overfitting dan menghentikan training setelah akurasi terpenuhi
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('accuracy') >= 0.87 and logs.get('val_accuracy') >= 0.87:
      print("\nAkurasi di atas 87%, hentikan training!")
      self.model.stop_training = True

# Utilize callback function
callbacks = myCallback()

"""## Melatih model dengan `model.fit()`"""

history = model.fit(
    train_generator,
    steps_per_epoch = 4,
    epochs = 100,
    validation_data = validation_generator,
    validation_steps = 4,
    verbose=2,
    callbacks=[callbacks]
)

"""## Membuat grafik _loss_ dan _accuracy_"""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(len(acc))

# Training and Validation Accuracy
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.show()

# Training and Validation Loss
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.show()

print(train_generator.class_indices)

"""## Menggunggah gambar untuk diprediksi"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(fn)
  if classes[0,0]!=0:
    print('cloudy')
  elif classes[0,1]!=0:
    print('desert')
  elif classes[0,2]!=0:
    print('Green Area')
  elif classes[0,3]!=0:
    print('Water')
  else:
    print('Unknown')

"""## Menyimpan model dalam format TF-Lite"""

# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

# Convert SavedModel menjadi vegs.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('satelite.tflite')
tflite_model_file.write_bytes(tflite_model)